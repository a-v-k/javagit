package edu.nyu.cs.javagit.cli.checkout;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import edu.nyu.cs.javagit.JavaGitException;
import edu.nyu.cs.javagit.cli.IParser;
import edu.nyu.cs.javagit.object.Ref;
import edu.nyu.cs.javagit.utilities.ExceptionMessageMap;

/**
 * Parser class to parse the output generated by &lt;git-checkout&gt; and return a <code>GitCheckoutResponse</code>
 * object.
 */
public class GitCheckoutParser implements IParser {

    private int                     lineNum;
    private GitCheckoutResponseImpl response;
    private List<ErrorDetails>      errors;

    /**
     * String pattern for matching files with modified, deleted, added words in the output.
     */
    private enum Pattern {
        MODIFIED("^M\\s+\\w+"), DELETED("^D\\s+\\w+"), ADDED("^A\\s+\\w+");

        String pattern;

        private Pattern(String pattern) {
            this.pattern = pattern;
        }

        public boolean matches(String line) {
            return line.matches(pattern);
        }
    }

    public GitCheckoutParser() {
        lineNum = 0;
        response = new GitCheckoutResponseImpl();
        errors = new ArrayList<ErrorDetails>();
    }

    public void parseLine(String line) {
        if (line == null || line.length() == 0) {
            return;
        }
        ++lineNum;
        if (!isErrorLine(line)) {
            parseSwitchedToBranchLine(line);
            parseFilesInfo(line);
        }
    }

    private boolean isErrorLine(String line) {
        if (line.startsWith("error") || line.startsWith("fatal")) {
            setError(lineNum, line);
            return true;
        }
        return false;
    }

    public void parseSwitchedToBranchLine(String line) {
        if (line.startsWith("Switched to branch")) {
            getSwitchedToBranch(line);
        }
        else if (line.startsWith("Switched to a new branch")) {
            getSwitchedToNewBranch(line);
        }
    }

    private void getSwitchedToBranch(String line) {
        String branchName = extractBranchName(line);
        Ref branch = Ref.createBranchRef(branchName);
        response.setBranch(branch);
    }

    private void getSwitchedToNewBranch(String line) {
        String newBranchName = extractBranchName(line);
        Ref newBranch = Ref.createBranchRef(newBranchName);
        response.setNewBranch(newBranch);
    }

    private String extractBranchName(String line) {
        int startIndex = line.indexOf('"');
        int endIndex = line.indexOf('"', startIndex + 1);
        return line.substring(startIndex, endIndex + 1);
    }

    private void parseFilesInfo(String line) {
        if (Pattern.MODIFIED.matches(line)) {
            File file = new File(extractFileName(line));
            response.addModifiedFile(file);
            return;
        }
        if (Pattern.DELETED.matches(line)) {
            File file = new File(extractFileName(line));
            response.addDeletedFile(file);
            return;
        }
        if (Pattern.ADDED.matches(line)) {
            File file = new File(extractFileName(line));
            response.addAddedFile(file);
        }
    }

    private String extractFileName(String line) {
        String filename = null;
        Scanner scanner = new Scanner(line);
        while (scanner.hasNext()) {
            filename = scanner.next();
        }
        return filename;
    }

    public void processExitCode(int code) {
    }

    public GitCheckoutResponse getResponse() throws JavaGitException {
        if (errors.size() > 0) {
            throw new JavaGitException(406000, ExceptionMessageMap.getMessage("406000")
                    + " - git checkout error message: { " + getError() + " }");
        }
        return response;
    }

    private String getError() {
        StringBuilder buffer = new StringBuilder();
        for (int i = 0; i < errors.size(); i++) {
            buffer.append(errors.get(i) + " ");
        }
        return buffer.toString();
    }

    private void setError(int lineNumber, String error) {
        ErrorDetails errorDetails = new ErrorDetails(lineNumber, error);
        errors.add(errorDetails);
    }

    private static class ErrorDetails {

        final int    lineNumber;
        final String error;

        public ErrorDetails(int lineNumber, String error) {
            this.lineNumber = lineNumber;
            this.error = error;
        }
    }
}