/**
 *  This file is part of LogiSima (http://www.logisima.com).
 *
 *  JavaGit is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  JavaGit is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JavaGit.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  @author Beno√Æt Simard
 *  @See https://github.com/sim51/javagit
 */
package com.logisima.javagit.cli.add;

import java.io.File;
import java.util.ArrayList;
import java.util.StringTokenizer;

import com.logisima.javagit.JavaGitException;
import com.logisima.javagit.cli.Parser;
import com.logisima.javagit.cli.Response;
import com.logisima.javagit.object.OutputErrorOrWarn;
import com.logisima.javagit.utilities.ExceptionMessageMap;

/**
 * Parser class that implements <code>Parser</code> for implementing a parser for &lt;git-add&gt; output.
 */
public class GitAddParser extends Parser {

    /**
     * "Git Add" response
     */
    private GitAddResponse response;

    /**
     * Constructor.
     */
    public GitAddParser() {
        super();
        response = new GitAddResponse();
    }

    @Override
    public void parseLine(String line) {
        if (line == null || line.length() == 0) {
            return;
        }
        numLinesParsed++;
        if (isError(line)) {
            errors.add(new OutputErrorOrWarn(numLinesParsed, line));
        }
        else if (isComment(line))
            response.getComments().add(new OutputErrorOrWarn(numLinesParsed, line));
        else
            processLine(line);
    }

    /**
     * Method to know if line is an error one.
     * 
     * @param line
     * @return <code>true</code> if line is an error line, else <code>false</code>
     */
    private boolean isError(String line) {
        if (line.trim().startsWith("fatal") || line.trim().startsWith("error")) {
            if (errors == null) {
                errors = new ArrayList<OutputErrorOrWarn>();
            }
            return true;
        }
        return false;
    }

    /**
     * Method to know if line is a commment one.
     * 
     * @param line
     * @return <code>true</code> if line is a comment line, else <code>false</code>
     */
    private boolean isComment(String line) {
        if (line.startsWith("Nothing specified") || line.contains("nothing added") || line.contains("No changes")
                || line.contains("Maybe you wanted to say") || line.contains("usage")) {
            return true;
        }
        return false;
    }

    /**
     * Lines that start with "add" have the second token as the name of the file added by &lt;git-add&gt.
     * 
     * @param line
     */
    private void processLine(String line) {
        if (line.startsWith("add")) {
            StringTokenizer st = new StringTokenizer(line);

            if (st.nextToken().equals("add") && st.hasMoreTokens()) {
                String extractedFileName = filterFileName(st.nextToken());
                if (extractedFileName != null && extractedFileName.length() > 0) {
                    File file = new File(extractedFileName);
                    response.getFilesAdded().add(file);
                }
            }
        }
        else {
            processSpaceDelimitedFilePaths(line);
        }
    }

    private void processSpaceDelimitedFilePaths(String line) {
        if (!line.startsWith("\\s+")) {
            StringTokenizer st = new StringTokenizer(line);
            while (st.hasMoreTokens()) {
                File file = new File(st.nextToken());
                response.getFilesAdded().add(file);
            }
        }
    }

    public String filterFileName(String token) {
        if (token.length() > 0 && enclosedWithSingleQuotes(token)) {
            int firstQuote = token.indexOf("'");
            int nextQuote = token.indexOf("'", firstQuote + 1);
            if (nextQuote > firstQuote) {
                return token.substring(firstQuote + 1, nextQuote);
            }
        }
        return null;
    }

    public boolean enclosedWithSingleQuotes(String token) {
        if (token.matches("'.*'")) {
            return true;
        }
        return false;
    }

    /**
     * Gets a <code>GitAddResponse</code> object containing the info generated by &lt;git-add&gt; command. If there was
     * an error generated while running &lt;git-add&gt; then it throws an exception.
     * 
     * @return GitAddResponse object containing &lt;git-add&gt; response.
     * 
     * @throws JavaGitException If there are any errors generated by &lt;git-add&gt; command.
     */
    public Response getResponse() throws JavaGitException {
        if (!errors.isEmpty()) {
            throw new JavaGitException(401000, ExceptionMessageMap.getMessage("401000")
                    + " - git add error message: { " + getError() + " }");
        }
        return response;
    }

}
